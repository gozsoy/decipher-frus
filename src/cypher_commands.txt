#####
# A- REDACTION ANALYSIS
#####

Q. Which topics have highest amount of redaction (sum of redacted lines) ?
match (d:Document)-[:REDACTED]-(r:Redaction)
where r.type = 'line' and isNan(r.amount)=False
with d, sum(r.amount) as r_amount
match (t:Topic)-[:ABOUT]-(d)
return t.description, count(d.docID) as doc_count, sum(r_amount) as tot_amount
order by tot_amount desc
limit 20

Q. Which topics have highest count of redaction ?
match (d:Document)-[:REDACTED]-(r:Redaction)
with d, count(r) as r_count
match (t:Topic)-[:ABOUT]-(d)
return t.description, count(d.docID) as doc_count, sum(r_count) as tot_count,  sum(r_count)/count(d.docID) as tot_count_per_doc
order by tot_count_per_doc desc
limit 20

Q. Which topics have highest count of 'dollar amount' redaction ? (also 'name')
match (d:Document)-[:REDACTED]-(r:Redaction)
where r.type = 'dollaramount'
with d, count(r) as r_count
match (t:Topic)-[:ABOUT]-(d)
return t.description, count(d) as doc_count, sum(r_count) as tot_count, sum(r_count)/count(d) as tot_count_per_doc
order by tot_count desc
limit 20

Q. Who has highest number of redaction count in documents s/he sent ? 
match (d:Document)-[:REDACTED]-(r:Redaction)
with d, count(r) as r_count
match (p:Person)-[:SENT_BY]-(d)
return p.name, count(d) as doc_count, sum(r_count) as tot_count, sum(r_count)/count(d) as tot_count_per_doc
order by tot_count desc
limit 20

Q. Who has highest average redaction amount (redacted lines) in documents s/he sent ?
match (d:Document)-[:REDACTED]-(r:Redaction)
where r.type = 'line' and isNan(r.amount)=False
with d, sum(r.amount) as r_amount
match (p:Person)-[:SENT_BY]-(d)
return p.name, count(d.docID) as doc_count, sum(r_amount) as tot_amount, sum(r_amount)/count(d.docID) as tot_amount_per_doc
order by tot_amount_per_doc desc
limit 20

Q. Which president has highest count of redaction ?
match (d:Document)-[:REDACTED]-(r:Redaction)
with d, count(r) as r_count
match (e:PresidentialEra)-[:DURING]-(d)
return e.name, count(d.docID) as doc_count, sum(r_count) as tot_count, sum(r_count)/count(d.docID) as tot_count_per_doc
order by tot_count desc
limit 20

Q. Which country has highest number of redaction count ?
match (d:Document)-[:REDACTED]-(r:Redaction)
with d, count(r) as r_count
match (d)-[:FROM]-(:City)-[:LOCATED_IN]-(c:Country)
return c.name, count(d.docID) as doc_count, sum(r_count) as tot_count, sum(r_count)/count(d.docID) as tot_count_per_doc
order by tot_count desc
limit 20 

#####
# B- ROLE CENTRALITY ANALYSIS
#####

1
match (p1:Person)-[:MENTIONED]-(d:Document)-[:MENTIONED]-(p2:Person)
match (r1:Role)-[ph1:POSITION_HELD]-(p1)
match (r2:Role)-[ph2:POSITION_HELD]-(p2)
where r1<>r2 and 
ph1.started is not null and ph1.ended is not null and
ph2.started is not null and ph2.ended is not null and
tostring(d.date) <> 'NaN' and date(datetime(ph1.started)) <= date(d.date) <= date(datetime(ph1.ended)) and
date(datetime(ph2.started)) <= date(d.date) <= date(datetime(ph2.ended)) and
size(ph1.started)=20 and size(ph1.ended)=20 and size(ph2.started)=20 and size(ph2.ended)=20
merge (r1)-[re:CENTRALITY_NEIGHBOR]-(r2)
return re
limit 10

2
call gds.graph.project('role_importance_projection',
'Role',
{CENTRALITY_NEIGHBOR:{orientation:'UNDIRECTED'}})
YIELD graphName, nodeProjection, nodeCount, relationshipProjection, relationshipCount, projectMillis

3
CALL gds.pageRank.stream('role_importance_projection')
YIELD nodeId, score
RETURN gds.util.asNode(nodeId).name AS name, score
ORDER BY score DESC
limit 100

#####
# C- DYNAMIC ENTITY EMBEDDINGS
#####

1
match (e1:DynamicEntity4YearBinned)<-[:MENTIONED]-(d:Document)-[:MENTIONED]->(e2:DynamicEntity4YearBinned)
merge (e1)-[r:ENTITY_NEIGHBOR]-(e2)
ON CREATE SET r.weight = 1
ON MATCH SET r.weight = r.weight + 1
return r
limit 10

2
call gds.graph.project('dynamic_entity_projection',
'Entity',
{NEIGHBOR:{orientation:'UNDIRECTED', properties: 'weight'}})
YIELD graphName, nodeProjection, nodeCount, relationshipProjection, relationshipCount, projectMillis

3
CALL gds.fastRP.write('dynamic_entity_projection', {embeddingDimension: 128, writeProperty: 'fastrp-embedding',  relationshipWeightProperty: 'weight'})
YIELD nodePropertiesWritten

#####
# D- LINK PREDICTION
#####

1
CALL gds.beta.pipeline.linkPrediction.create('pipe-wikidata')

2
CALL gds.beta.pipeline.linkPrediction.addNodeProperty('pipe-wikidata', 'fastRP', {
  mutateProperty: 'embedding',
  embeddingDimension: 128,
  randomSeed: 42,
  contextRelationshipTypes: ['SIMILAR_DESCP']
})

3
CALL gds.beta.pipeline.linkPrediction.addFeature('pipe-wikidata', 'hadamard', {
  nodeProperties: ['embedding']
})

4
CALL gds.beta.pipeline.linkPrediction.configureSplit('pipe-wikidata', {
  testFraction: 0.2,
  trainFraction: 0.6,
  validationFolds: 3
})

5
CALL gds.alpha.pipeline.linkPrediction.addMLP('pipe-wikidata',
{hiddenLayerSizes: [4, 2], penalty: 1, patience: 2})
YIELD parameterSpace
CALL gds.beta.pipeline.linkPrediction.addLogisticRegression('pipe-wikidata')
YIELD parameterSpace

6
CALL gds.graph.project(
  'projection-wikidata-religion',
  ['Person','Religion'],
  {BELIEVED: {orientation: 'UNDIRECTED'},
  SIMILAR_DESCP: {orientation: 'UNDIRECTED'}}
)

7
CALL gds.beta.pipeline.linkPrediction.train('projection-wikidata-religion', {
  pipeline: 'pipe-wikidata',
  modelName: 'model-wikidata-religion',
  metrics: ['AUCPR'],
  targetRelationshipType: 'BELIEVED',
  sourceNodeLabel: 'Person',
  targetNodeLabel: 'Religion',
  randomSeed: 12
}) YIELD modelInfo, modelSelectionStats
RETURN
  modelInfo.bestParameters AS winningModel,
  modelInfo.metrics.AUCPR.train.avg AS avgTrainScore,
  modelInfo.metrics.AUCPR.outerTrain AS outerTrainScore,
  modelInfo.metrics.AUCPR.test AS testScore,
  [cand IN modelSelectionStats.modelCandidates | cand.metrics.AUCPR.validation.avg] AS validationScores

8
CALL gds.beta.pipeline.linkPrediction.predict.stream('projection-wikidata-religion', {
  modelName: 'model-wikidata-religion',
  topN: 200,
  threshold: 0.3
})
 YIELD node1, node2, probability
 with gds.util.asNode(node1).name AS person, gds.util.asNode(node2).name AS religion, probability
match (p:Person)-[:BELIEVED]-(r:Religion)
with person, religion, probability, collect(p.name) as excluded_names
where not person in excluded_names
return person, religion, probability



