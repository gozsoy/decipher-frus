ENTITY("Document"):
    NODE("Document") document:
        + docID = Document.id_to_text #EXPORT_TEXT_TO_DB(Document.id_to_text)
        - subtype = Document.subtype
        - volume = Document.volume
        - date = AUX2(Document.date)
        - year = INT(Document.year)
        - text_length = INT(Document.txt_len)
        - subjectivity = FLOAT(Document.subj)
        - polarity = FLOAT(Document.pol)
        - type_token_ratio = FLOAT(Document.ttr)
        - corrected_type_token_ratio = FLOAT(Document.cttr)
    #ONLY_CREATE_IF_EXISTS(NODE("Source"), 'source') source:
    #    + name = Document.source
    ONLY_CREATE_IF_EXISTS(NODE("City"), 'city') city:
        + name = Document.city
    #ONLY_CREATE_IF_EXISTS(RELATION(document, "STORED", source), 'source'):
    ONLY_CREATE_IF_EXISTS(RELATION(document, "FROM", city), 'city'):
    RELATION(document, "DURING", MATCH("PresidentialEra", name=Document.era)):


ENTITY("Country"):
    ONLY_CREATE_IF_EXISTS(NODE("Country"), 'countryLabel') country:
        + name = Country.countryLabel
        - tag = Country.countryTag


ENTITY("CityCountry"):
    NODE("City") city:
        + name = CityCountry.placeName
    ONLY_CREATE_IF_EXISTS(NODE("Country"), 'country') country:
        + name = CityCountry.country
    ONLY_CREATE_IF_EXISTS(RELATION(city, "LOCATED_IN", country), 'country'):


ENTITY("CountryMentionedIn"):
    RELATION(MATCH("Document", docID=CountryMentionedIn.id_to_text), "MENTIONED", MATCH("Country", name=CountryMentionedIn.countryLabel)):


ENTITY("Era"):
    NODE("PresidentialEra") pe:
        + name = Era.president
        - startDate = AUX(Era.startDate)
        - endDate = AUX(Era.endDate)
        - startYear = INT(Era.startYear)
        - endYear = INT(Era.endYear)

ENTITY("Person"):
    NODE("Person") person:
        + name = Person.name_set
        - name_list = Person.name_list
        - id_list = Person.id_list
        - description_list = Person.description_list
        - candidate_wiki_entries = Person.wiki_col
        - selected_wiki_entity = Person.selected_wiki_entity
        - gender = Person.gender


ENTITY("PersonSentBy"):
    RELATION(MATCH("Document", docID=PersonSentBy.sent), "SENT_BY", MATCH("Person", name=PersonSentBy.person_name)):


ENTITY("PersonSentTo"):
    RELATION(MATCH("Document", docID=PersonSentTo.received), "SENT_TO", MATCH("Person", name=PersonSentTo.person_name)):


ENTITY("PersonMentionedIn"):
    RELATION(MATCH("Document", docID=PersonMentionedIn.mentioned_in), "MENTIONED", MATCH("Person", name=PersonMentionedIn.person_name)):


ENTITY("Citizenship"):
    NODE("Person") person:
        + name = Citizenship.name_set
    NODE("Country") country:
        + name = Citizenship.info_name # be careful with historical countries
        - tag = Citizenship.info_tag
    RELATION(MATCH("Person", name=Citizenship.name_set), "CITIZEN_OF", country):
        - started = Citizenship.start_year
        - ended = Citizenship.end_year


ENTITY("Occupation"):
    NODE("Person") person:
        + name = Occupation.name_set
    NODE("Occupation") occupation:
        + name = Occupation.info_name
        - tag = Occupation.info_tag
    RELATION(MATCH("Person", name=Occupation.name_set), "WORKED_AS", occupation):


ENTITY("School"):
    NODE("School") school:
        + name = School.info_name
        - tag = School.info_tag
    RELATION(MATCH("Person", name=School.name_set), "EDUCATED_AT", school):
    RELATION(school, "IN", MATCH("Country", name=School.country)):


ENTITY("PoliticalParty"):
    NODE("PoliticalParty") party:
        + name = PoliticalParty.info_name
        - tag = PoliticalParty.info_tag
        #- ideology
    RELATION(MATCH("Person", name=PoliticalParty.name_set), "MEMBER_OF", party):
        - started = PoliticalParty.start_year
        - ended = PoliticalParty.end_year
    RELATION(party, "IN", MATCH("Country", name=PoliticalParty.country)):


ENTITY("Role"):
    NODE("Role") role:
        + name = Role.info_name
        - tag = Role.info_tag
    RELATION(MATCH("Person", name=Role.name_set), "POSITION_HELD", role):
        - started = Role.start_year
        - ended = Role.end_year


ENTITY("Religion"):
    NODE("Religion") religion:
        + name = Religion.info_name
        - tag = Religion.info_tag
    RELATION(MATCH("Person", name=Religion.name_set), "BELIEVED", religion):


ENTITY("Redaction"):
    NODE("Redaction") redaction:
        + redaction_id = INT(Redaction.redaction_id)
        - raw_text = Redaction.raw_text
        - detected_chunks = Redaction.detected_chunks
        - type = Redaction.type_col
        - amount = FLOAT(Redaction.amount_col)  # float|None
    RELATION(MATCH("Document", docID=Redaction.id_to_text), "REDACTED", redaction):


# Nodes related to topic modeling with Bertopic with named entities
ENTITY("TopicBertWithEntities"):
    NODE("TopicBertWithEntities") topic:
        + name = TopicBertWithEntities.Name
        - description = TopicBertWithEntities.Top_n_words


ENTITY("DocTopicBertWithEntities"):
    RELATION(MATCH("Document", docID=DocTopicBertWithEntities.id_to_text), "ABOUT", MATCH("TopicBertWithEntities", name=DocTopicBertWithEntities.assigned_topic)):


# Nodes related to topic modeling with Bertopic without named entities
ENTITY("TopicBertNoEntities"):
    NODE("TopicBertNoEntities") topic:
        + name = TopicBertNoEntities.Name
        - description = TopicBertNoEntities.Top_n_words


ENTITY("DocTopicBertNoEntities"):
    RELATION(MATCH("Document", docID=DocTopicBertNoEntities.id_to_text), "ABOUT", MATCH("TopicBertNoEntities", name=DocTopicBertNoEntities.assigned_topic)):


# Nodes related to topic modeling with LDA without named entities
ENTITY("TopicLDANoEntities"):
    NODE("TopicLDANoEntities") topic:
        + name = TopicLDANoEntities.Name
        - description = TopicLDANoEntities.Top_n_words


ENTITY("DocTopicLDANoEntities"):
    RELATION(MATCH("Document", docID=DocTopicLDANoEntities.id_to_text), "ABOUT", MATCH("TopicLDANoEntities", name=DocTopicLDANoEntities.assigned_topic)):


ENTITY("EntitySentiment"):
    NODE("NamedEntity") ne:
        + name = EntitySentiment.named_entity
    RELATION(MATCH("Document", docID=EntitySentiment.id_to_text), "HAS_SENTIMENT", ne):
        - polarity = EntitySentiment.pol
        - subjectivity = EntitySentiment.sub


# change the name manually
ENTITY("DocDynamicEnt4YearBinned"):
    NODE("DynamicEntity4YearBinned") dne:
        + name = DocDynamicEnt4YearBinned.dynamic_named_entity
    RELATION(dne, "IN", MATCH("Document", docID=DocDynamicEnt4YearBinned.id_to_text)):


# might be redundant
ENTITY("DocDynamicEnt5YearBinned"):
    NODE("DynamicEntity5YearBinned") dne:
        + name = DocDynamicEnt5YearBinned.dynamic_named_entity
    RELATION(dne, "IN", MATCH("Document", docID=DocDynamicEnt5YearBinned.id_to_text)):
    

ENTITY("PersonDescpSimilarity"):
    RELATION(MATCH("Person", name=PersonDescpSimilarity.source_person), "SIMILAR_DESCP", MATCH("Person", name=PersonDescpSimilarity.target_person)):


ENTITY("Term"):
    NODE("Term") term:
        + name = Term.description_set
        - name_list = Term.description_list
        - id_list = Term.id_list

ENTITY("TermMentionedIn"):
    RELATION(MATCH("Document", docID=TermMentionedIn.mentioned_in), "MENTIONED", MATCH("Term", name=TermMentionedIn.description_set)):
